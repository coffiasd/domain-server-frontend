import Head from 'next/head'
import styles from '../styles/Home.module.css'
import 'bootstrap/dist/css/bootstrap.css';
import React from 'react';
import Web3 from 'web3';
import { LSPFactory } from '@lukso/lsp-factory.js';
import { ERC725 } from '@erc725/erc725.js';
import 'isomorphic-fetch';
import Metadata from '@erc725/erc725.js/schemas/LSP3UniversalProfileMetadata.json';
import KeyManager from '@erc725/erc725.js/schemas/LSP6KeyManager.json';
import 'mdb-react-ui-kit/dist/css/mdb.min.css'
// import { Form } from 'react-bootstrap';
import dynamic from 'next/dynamic'

const DynamicVote = dynamic(() => import('../components/Vote'), {
  ssr: false,
})

const AddVote = dynamic(() => import('../components/Add'), {
  ssr: false,
})


export default function Home() {
  var controllerAddress = ""
  const [guardians, setguardians] = React.useState([]);

  const [buttonValue, setbuttonValue] = React.useState("Connect Lukso Wallet")
  const [buttonClass, setbuttonClass] = React.useState("spinner-border spinner-border-sm visually-hidden")
  const [login, SetLogin] = React.useState(false);
  const [user, setUser] = React.useState({ name: "" });
  const RPC_ENDPOINT = 'https://rpc.l16.lukso.network';
  const IPFS_GATEWAY = 'https://2eff.lukso.dev/ipfs/';

  const connectWallet = async (event) => {
    if (window.ethereum) {
      const web3 = new Web3(window.ethereum);
      const accounts = await web3.eth.requestAccounts();
      const UPAddress = accounts[0];

      const provider = new Web3.providers.HttpProvider(RPC_ENDPOINT);
      const config = { ipfsGateway: IPFS_GATEWAY };

      async function fetchProfile(address) {
        setbuttonValue("Loading...");
        setbuttonClass("spinner-border spinner-border-sm");
        try {
          const profile = new ERC725(Metadata, address, provider, config);
          return await profile.fetchData();
        } catch (error) {
          return console.log('This is not an ERC725 Contract');
        }
      }

      async function fetchKeyManager(address) {
        try {
          const profile = new ERC725(KeyManager, address, provider, config);
          return await profile.fetchData();
        } catch (error) {
          return console.log('This is not an ERC725 Contract');
        }
      }

      fetchProfile(UPAddress).then(
        function (profileData) {
          user.name = profileData[1].value.LSP3Profile.name;
          setUser(user);
          SetLogin(true);
        }
      );

      fetchKeyManager(UPAddress).then(
        function (managereData) {
          console.log(managereData);
          var list = [];
          managereData.forEach(element => {
            list.push(element.key);
          });
          setguardians(list);
        }
      );


    } else {
      alert("Please install MetaMask");
    }
  };

  const addController = async (event) => {
    if (controllerAddress == "") {
      alert("Please enter a controller address");
      return;
    }

    console.log("add controller address:", controllerAddress);
    await ethereum.request({ method: 'eth_requestAccounts', params: [] });
    const lspFactory = new LSPFactory(ethereum, {
      chainId: 2828,
    });

    const manager = await lspFactory.UniversalProfile.deploy({
      controllerAddresses: [
        controllerAddress,
      ],
    });
    console.log(manager);
  }

  return (
    <div className={styles.container}>

      <nav className="navbar navbar-expand-lg navbar-light bg-white">
        <div className="container-fluid">
          <button
            className="navbar-toggler"
            type="button"
            data-mdb-toggle="collapse"
            data-mdb-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent"
            aria-expanded="false"
            aria-label="Toggle navigation"
          >
            <i className="fas fa-bars"></i>
          </button>

          <div className="collapse navbar-collapse" id="navbarSupportedContent">
            <a className="navbar-brand mt-2 mt-lg-0" href="#">
              <img
                src="/icon.svg"
                height="15"
                alt="MDB Logo"
                loading="lazy"
              />
            </a>
            <ul className="navbar-nav me-auto mb-2 mb-lg-0">
              <li className="nav-item">
                <a className="nav-link" href="#">Dashboard</a>
              </li>
            </ul>
          </div>

          <div className="col-1">
            <button type="button" className="btn btn-primary">Connect to UP</button>
          </div>

        </div>
      </nav>


      <Head>
        <title>Lukso Demo Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        {/* <section className="vh-50 container  d-flex justify-content-center">
          <DynamicVote />
        </section> */}

        <section className="vh-50">
          <AddVote />
        </section>

      </main >

      <footer className={styles.footer}>
        Powered By Ayden lee
      </footer>
    </div >
  )
}