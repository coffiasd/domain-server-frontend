import Head from 'next/head'
import styles from '../styles/Home.module.css'
import 'bootstrap/dist/css/bootstrap.css';
import React from 'react';
import { Button, Card, CardBody, CardTitle, Form, FormGroup, Input, List } from 'reactstrap';
import Web3 from 'web3';
import { LSPFactory } from '@lukso/lsp-factory.js';
import { ERC725 } from '@erc725/erc725.js';
import 'isomorphic-fetch';
import erc725schema from '@erc725/erc725.js/schemas/LSP3UniversalProfileMetadata.json';

export default function Home(data) {
  var controllerAddress = ""
  const [buttonValue, setbuttonValue] = React.useState("Connect Lukso Wallet")
  const [buttonClass, setbuttonClass] = React.useState("spinner-border spinner-border-sm visually-hidden")
  const [login, SetLogin] = React.useState(false);
  const [user, setUser] = React.useState({ name: "" });
  const RPC_ENDPOINT = 'https://rpc.l16.lukso.network';
  const IPFS_GATEWAY = 'https://2eff.lukso.dev/ipfs/';

  const connectWallet = async (event) => {
    if (window.ethereum) {
      const web3 = new Web3(window.ethereum);
      const accounts = await web3.eth.requestAccounts();
      const UPAddress = accounts[0];

      const provider = new Web3.providers.HttpProvider(RPC_ENDPOINT);
      const config = { ipfsGateway: IPFS_GATEWAY };

      async function fetchProfile(address) {
        setbuttonValue("Loading...");
        setbuttonClass("spinner-border spinner-border-sm");
        try {
          const profile = new ERC725(erc725schema, address, provider, config);
          return await profile.fetchData();
        } catch (error) {
          return console.log('This is not an ERC725 Contract');
        }
      }

      fetchProfile(UPAddress).then(
        function (profileData) {
          console.log(profileData[1]);
          user.name = profileData[1].value.LSP3Profile.name;
          setUser(user);
          SetLogin(true);
        }
      );

      // const erc725 = new ERC725(erc725schema, UPAddress, provider, config);


    } else {
      alert("Please install MetaMask");
    }
  };

  const addController = async (event) => {
    if (controllerAddress == "") {
      alert("Please enter a controller address");
      return;
    }
    await ethereum.request({ method: 'eth_requestAccounts', params: [] });
    const lspFactory = new LSPFactory(ethereum, {
      chainId: 2828,
    });

    const manager = await lspFactory.UniversalProfile.deploy({
      controllerAddresses: [
        controllerAddress,
      ],
    });
    console.log(manager);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Lukso Demo Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h3 className={styles.title}>
          Lukso Demo Page
        </h3>

        <div className={styles.grid}>

          {login ? "" : <button onClick={connectWallet} type="button" className="btn btn-secondary">{buttonValue}
            <span className={buttonClass} role="status" aria-hidden="false"></span>
          </button>}


          {login ? <Card
            style={{
              width: '20rem',
            }}
          >
            <img
              title='profile image'
              className={styles.profileImage}
              alt="Card"
              src="https://picsum.photos/300/200"
            />
            <span className={styles.imgSpan}>{user.name}</span>

            <img
              className={styles.imageStyle}
              alt="Card"
              src="https://picsum.photos/300/200"
            />
            <CardBody>
              <Form>
                <FormGroup>
                  <Input
                    id="examplePassword"
                    name="address"
                    placeholder="input guardians address"
                    type="text"
                    value={controllerAddress}
                  />
                </FormGroup>
                <Button onClick={addController}>
                  Add guardians
                </Button>
                <hr className="hr" />
                <List type="unstyled">
                  <li>
                    Guardians list
                    <ul>
                      <li>
                        Phasellus iaculis neque
                      </li>
                      <li>
                        Purus sodales ultricies
                      </li>
                    </ul>
                  </li>
                </List>
              </Form>
            </CardBody>
          </Card> : ""}




        </div>

      </main >

      <footer className={styles.footer}>
        Powered By Ayden lee
      </footer>
    </div >
  )
}

export async function getStaticProps() {
  const data = {
    "buttonValue": "Connect Wallet"
  }

  return {
    props: data
  }
}